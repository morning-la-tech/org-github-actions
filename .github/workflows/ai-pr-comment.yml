name: AI PR Auto-Comment with ChatGPT

on:
  pull_request:
    types:
      - opened

jobs:
  ai-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch PR details
        env:
          ORG_ACCESS_TOKEN: ${{ secrets.ORG_ACCESS_TOKEN }}
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"

          echo "Fetching PR diff..."
          PR_DIFF=$(curl -s -H "Authorization: token $ORG_ACCESS_TOKEN" \
            -H "Accept: application/vnd.github.v3.diff" \
            "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER")

          if [[ -z "$PR_DIFF" ]]; then
            echo "❌ Error: Unable to fetch PR diff. Check token permissions."
            exit 1
          fi

          echo "✅ PR diff fetched successfully."

          # Store PR details in environment variables
          echo "title=$PR_TITLE" >> $GITHUB_ENV
          echo "body=$PR_BODY" >> $GITHUB_ENV

          # Store multi-line diff safely
          echo "diff<<EOF" >> $GITHUB_ENV
          echo "$PR_DIFF" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate AI PR Auto-Comment
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Generating AI comment..."

          REQUEST_DATA=$(jq -n --arg title "$title" --arg body "$body" --arg diff "$diff" '{
            model: "gpt-4o-mini",
            temperature: 0.2,
            max_tokens: 300,
            messages: [
              {role: "system", content: "You are an AI assistant that provides concise, direct feedback on PRs. Avoid formalities and go straight to constructive points. No need for introductions or niceties."},
              {role: "user", content: ("Review this PR:\n\nTitle: " + $title + "\n\nDescription: " + $body + "\n\nDiff:\n" + $diff + "\n\nGive feedback without introductions. Be clear and straight to the point.")}
            ]
          }')

          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_DATA")

          AI_COMMENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          if [ -z "$AI_COMMENT" ] || [ "$AI_COMMENT" == "null" ]; then
            AI_COMMENT="⚠️ AI comment failed. Unable to generate feedback."
          fi

          echo "ai_comment<<EOF" >> $GITHUB_ENV
          echo "$AI_COMMENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "✅ AI comment generated successfully!"

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_ACCESS_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const comment = process.env.ai_comment;

            if (!comment || comment.trim() === "⚠️ AI comment failed. Unable to generate feedback.") {
              console.log("Skipping comment as AI feedback is empty or invalid.");
              return;
            }

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

            console.log("✅ AI comment posted successfully!");
