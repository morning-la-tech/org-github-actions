name: AI PR Review with ChatGPT Mini

on:
  workflow_call:
    secrets:
      OPENAI_API_KEY:
        required: true
      ORG_ACCESS_TOKEN:
        required: true

jobs:
  ai-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch PR details
        env:
          ORG_ACCESS_TOKEN: ${{ secrets.ORG_ACCESS_TOKEN }}
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"

          echo "Fetching PR diff..."
          PR_DIFF=$(curl -s -H "Authorization: token $ORG_ACCESS_TOKEN" \
            -H "Accept: application/vnd.github.v3.diff" \
            "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER")

          if [[ -z "$PR_DIFF" ]]; then
            echo "‚ùå Error: Unable to fetch PR diff. Check token permissions."
            exit 1
          fi

          # R√©cup√©rer le dernier commit du PR
          COMMIT_ID=$(curl -s -H "Authorization: token $ORG_ACCESS_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/commits" | jq -r '.[-1].sha')

          if [[ -z "$COMMIT_ID" || "$COMMIT_ID" == "null" ]]; then
            echo "‚ùå Error: Unable to fetch latest commit ID."
            exit 1
          fi

          echo "‚úÖ PR diff and commit ID fetched successfully."

          echo "title=$PR_TITLE" >> $GITHUB_ENV
          echo "body=$PR_BODY" >> $GITHUB_ENV
          echo "commit_id=$COMMIT_ID" >> $GITHUB_ENV

          # Stocker le diff proprement
          echo "$PR_DIFF" > pr_diff.txt

      - name: Generate AI PR Review with Strict JSON Format
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Generating AI review comments with strict JSON format..."

          REQUEST_DATA=$(jq -n \
            --arg title "$title" \
            --arg body "$body" \
            --argfile diff pr_diff.txt \
            '{
              model: "gpt-4o-mini",
              temperature: 0.2,
              max_tokens: 700,
              stop: ["\n\n"],  # √âvite que l'IA ajoute des annotations ou du texte hors JSON
              messages: [
                {role: "system", content: "You are a senior software engineer reviewing a pull request. Analyze the provided diff and return ONLY a JSON array. Each element must be an object with four keys: \"file\", \"position\", \"comment\", and \"suggestion\" (optional). 
                - Ensure that the \"position\" value corresponds to the correct diff position (as attendu par GitHub‚Äôs createReviewComment API) for the change you are commenting on. 
                - If possible, provide an improved version of the code in the \"suggestion\" field.
                - Keep comments focused on logic issues, security, and performance.
                - Ignore minor style or formatting changes.
                - **DO NOT RETURN ANYTHING ELSE THAN JSON** (no explanations, no markdown, no annotations).
                "},
                {role: "user", content: ("Analyze this PR:\n\nTitle: " + $title + "\n\nDescription: " + $body + "\n\nDiff:\n" + $diff)}
              ]
            }')

          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_DATA")

          AI_REVIEWS=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          # Nettoyage et validation stricte du JSON
          CLEANED_AI_REVIEWS=$(echo "$AI_REVIEWS" | jq '.' 2>/dev/null || echo "[]")

          echo "$CLEANED_AI_REVIEWS" > ai_reviews.json

          echo "‚úÖ AI Review with strict JSON format generated successfully!"

      - name: Post AI Review Comments on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_ACCESS_TOKEN }}
          script: |
            const fs = require('fs');
            const prNumber = context.payload.pull_request.number;
            const commitId = process.env.commit_id;

            let aiReviews;
            try {
              aiReviews = JSON.parse(fs.readFileSync('ai_reviews.json', 'utf8'));
            } catch (error) {
              console.log("Skipping AI review comments: Invalid JSON format.");
              return;
            }

            if (!Array.isArray(aiReviews) || aiReviews.length === 0) {
              console.log("Skipping line comments as AI did not generate any.");
              return;
            }

            console.log(`AI suggested ${aiReviews.length} comments. Posting now...`);

            for (const review of aiReviews) {
              if (!review.file || !review.position || !review.comment) continue;

              let commentBody = `ü§ñ **AI Review:** ${review.comment}`;
              if (review.suggestion && review.suggestion.trim() !== "") {
                commentBody += `\n\nüí° **Suggestion:**\n\`\`\`suggestion\n${review.suggestion}\n\`\`\``;
              }

              try {
                github.rest.pulls.createReviewComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  body: commentBody,
                  path: review.file,
                  commit_id: commitId,
                  position: review.position
                });
                console.log(`‚úÖ Posted AI review on ${review.file} at diff position ${review.position}`);
              } catch (error) {
                console.error(`‚ùå Failed to post AI review on ${review.file} at diff position ${review.position}:`, error.message);
              }
            }

            console.log("‚úÖ All AI review comments posted successfully!");
